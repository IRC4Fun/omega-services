// $Id: example.cfg 2390 2012-05-04 15:08:35Z twitch $

/*
 *       OMEGA SECURITY SERVICES
 *   (C) 2008-2012 Omega Development Team
 *
 *
 *        Configuration file v0.2
 *
 *
 */

/*  Omega allows multiple comment types within the configuration
 *   below are the recognized comment types: 
 */
# Single line comment
// Single line comment
/* Multi line comment */


/* Include Directive
 * 
 *    Allow additional files to be included in configuration
 *
 *  file (required) path of the file to be included.
 *
 */

#<include file="etc/access.cfg">

/*
 * Omega Configuration ID Tag [REQUIRED] 
 * configuration format may change
 * between versions. If their is no version
 * Omega will assume current version.
 * 
 */

<?omega version="2"> 

 /*
  * Protocol Directive
  *  name (required) the name of the protocol to use
  *  ts6  (optional) Weather or not to force TS6 support
  *
  * Supported Protocols:
  *	bahamut     (Bahamut IRCd)
  * 	unreal32    (Unreal 3.2+)
  * 	ratbox      (ratbox-ircd 2.2+)
  * 	ratbox3     (ratbox-ircd 3.0+)
  * 	hybrid      (Hybrid IRCd)
  *     inspircd    (Inspircd 1.1) 
  * 	inspircd12  (Inspircd 1.2)
  *     inspircd20  (Inspircd 2.0) 
  *     kcircd      (KC-IRCd)
  *     plexus      (Plexus IRCd)
  *     nafarious   (Nafarious IRCd) 
  * 
  *
  * Also note if there is not TS6 support for the specified
  * protocol it will be overridden to use non-ts6.  
  */
  
<protocol name="unreal32" ts6="no">

/*
 * Server Directive
 *
 *  name (required) Name of our server
 *  sid  (optional) Our server ID (used for TS6 protocols)
 *  numeric (optional) Our Server Numeric (Used for Non-TS6 Links)
 * 
 *  Note: If numeric or sid is not defined here - It will assume default
 *        values.
 */
 
<server name="security.network.tld" sid="44X" numeric="9">

/*
 * Link Directive
 *  name    (required) Host/IP of the server we are connecting to
 *  network (required) Network name  
 *  pass    (required) Password sent to our uplink on connect.
 *  port    (optional) Port to connect on default 6667
 *  gnutls  (optional) Use GNUTLS (SSL) while connecting default no
 */ 

<link name="dev.omega-services.org" network="random" port="7088" pass="linkP@ss" gnutls="no">

/*
 * Settings Directive
 *  pidfile  (Optional) (pidfile.pid) File that stores our pid
 *  ip       (Optional) (Ip)          Our current IP to bind to used for 
 *                                    inbound/outbound connections
 *  privmsg  (Optional) (Yes|No|1)    Use privmsg to communicate with users 
 *  operonly (Optional) (Yes|No|1)    Weather Omega is for oper only use,
 *                                    Omega will default to operonly.
 *  umode    (Optional)               Default usermode assigned to local bots.
 *                                     
 *  
 *
 */

<settings ip="127.0.0.1" pidfile="omega.pid" privmsg="no" operonly="yes" umode="+o">
  
/*
 * Access Directive
 *
 * name  (required) Access name we are storing under
 * flags (required) What flags are we going to assign
 * host  (required) Host we are going to set the access on
 * 
 * Please note, that if there are no flags the core
 * will assume the access entry already exists.
 *
 * For multiple hosts separate the list with a space.
 * IE:
 *  <access name="dev" host="myhost@example.tld host2@tld.com" flags="root">
 *
 *  host does a standard wildcard match on the following formats:
 *  	 	nick!user@ip/host
 *		 	user@ip/host
 *			*@ip/host
 *
 * You can define access flags 1 of two ways using predefined access
 * such as 
 *
 *  <access name="dev" host="myhost@example.tld host2@tld.com" flags="root">
 *
 * Or you can define the flags individually
 *  
 *  <access name="dev" host="myhost@example.tld host2@tld.com" flags="oamljsDdru">
 *
 * Flags
 *
 *    Predefined Access:
 *      Root - amljsDdr
 *      Admin - ralmjsd
 *      Staff - sljr
 *      Oper -  al
 *
 *    Access Flags:
 *       Access - a   Can use Access commands
 *         List - l   Access to LIST commands
 *          Set - s   Access to set commands
 *        Debug - d   Use debug commands (Debug mode must be enabled)
 *          Die - D   Can RESTART/SHUTDOWN Omega
 *       Module - m   Load/Unload Modules
 *         Join - j   Join client to a channel using invite
 *       Rehash - r   REHASH the server.
 */
 
<access name="dev" flags="root" host="*@example.tld">

/*
 * Die Directive
 * 
 * Do not start the server under any circumstance, bail and die.
 */

<die msg="You should make sure to remove all die tags - yes they are a pita, but it makes you read :)"> 

/*
 * Logging Directive (optional)
 * 
 * channel (optional)  (#channel)  Channel to display log messages to. 
 *         ^^^ NOT RECOMMENDED FOR USE ON LARGE NETS ^^^
 * nicks    (optional) (yes|no)    NICK changes to log channel. 
 * users    (optional) (yes|no)    Log CONNECT/QUITS/NICKS from the server
 *                                 implies both nicks="yes" connects="yes" 
 * commands (optional) (yes|no)    Log CONNECT/QUITS 
 * connects (optional) (yes|no)    Log Connects
 */

<logging channel="#Omega" nicks="yes" channels="yes" users="yes">

/*
 * Guardian Directive
 * Sets the information to the Guardian client
 *   
 *   nick      (Required) - Sets guardians nickname
 *   host      (Required) - Sets the hostname of guardian
 *   ident     (Required) - Sets Guardians gecos
 *   channels  (Optional) - Sets the channels for guardian to join
 *                          (Guardian will automatically join logchan)
 * 
 */
<guardian nick="Guardian" host="network.tld" ident="security" channels="#Omega,#Services,#Security">


/*
 * Module directive
 *  name (Required)  - Module filename
 *  dir  (Optional)  - If dir is specified load all modules in the dir
 *                     name does not need to be specified if dir is given. 
 *  load (Optional)  - When the module should be loaded
 *        Load Order:
 *              a) Pre  
 *              b) Standard
 *              c) post
 *
 *    Note: If depenancies are not met at the time of load, if module load is
 *          Pre or Standard, the core will push modules down to the next load time
 *          to insure depenancies are met properly, if it still isnt met then we 
 *          by post, bail on the module load.
 */
 
 
/*
 * Guardian Modules 
 * 
 *   Guardian core commands and features
 */

<module name="g_core, g_log, g_access, g_die, g_modlist, g_modreload, g_modunload, g_update, g_modload, g_userinfo, g_opm, g_sessions, g_joinflood">

/*
 * g_watch.so
 *
 * bantime      (Optional) - Length of time for gline/kline/zline, use 0 for permenant
 * defaultflags (Optional) - Default flags for new entries, seperate flags by comma
 *
 * Available flags:
 *    - IGNOREOPERS
 *    - IGNOREACCESS
 *    - REGEX
 *
 */

#<module name="g_watch" load="post">

<watch bantime="4h" defaultflags="IGNOREOPERS">

/*
 *
 * pattern    (Required) - Channel/Nickname pattern
 * action     (Required) - Action to be taken
 * reason     (Required) - Reason used for kick or network ban
 *
 * flags      (Optional) - Flags for the watch entry, seperate flags by comma
 * bantime    (Optional) - Length of ban
 *
 * Available actions:
 *    kick, kickban, gline, kline, zline, gzline
 *
 */

# Example channel watch entry
#<watchentry pattern="#goaway" action="kickban" reason="Go Away!">

# Example nickname pattern watch entry
#<watchentry pattern="BadNick" action="gline" reason="Bad user">

/*
 * m_splitserv.so
 *
 * Provides Split Tracking
 */

<module name="m_splitserv" load="post">
<splitserv nick="SplitServ" ident="splitserv" host="splits.services" channel="#splits" timeout="2d" splitsave="no" splitexpire="yes">  


/**
 * Configure fantasy prefix.
 *
 * 	Configure fantasy commands prefix, ie a value of ! will have services respond to !<command> 
 *      within a channel they are presently in. This must be a single character, or only the first 
 *      character will be taken as prefix.
 *  
 *      NOTE: This tag is not required to be present in the configuration file, if it is not present
 *            server will assume value of !
 */

<fantasy prefix="!">

/**
 * g_bl.so
 *
 * Provide DNSBL based proxy lookups
 */

<module name="g_bl">

/**
 *  Black list configration
 *  Configure blacklist lookups, this will allow you to use configure zone block lists
 *  such as dronebl. You can use multiple directives to configure each blacklist.
 *    
 *  host   (Required)  The host to use when querying the zone for an IP blacklist entry.
 *  reason (Optional)  Reason string returned to the user which is used in the XLINE entry.
 * 
 *     Note: IPs are reversed prior to zone lookup IE: 127.0.0.1 will be looked up as
 *           1.0.0.127.host any DNS returns on this address will result in an xline being
 *           placed on the IP address.
 *
 */

<blacklist host="dnsbl.dronebl.org" reason="Your host has been found on a dronebl blacklist">


