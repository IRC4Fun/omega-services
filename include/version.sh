#!/bin/bash
#
# Build version string and increment Services build number.
# coded by twitch and based very loosly on Anope's version
# script
#
# $Id: version.sh 2148 2011-04-30 03:47:09Z twitch $

# Grab version information from the version control file.

REV=""
UNAME=`uname -rsnm`

rm include/version.h

function seperate {
  local IFS=$2
  local foo
  set -f # Disable glob expansion
  foo=( $1 ) # Deliberately unquoted 
  set +f
  printf '%s\n' "${foo[@]}"
}



if [ -f ${PWD}/version.log ] ; then
  CTRL="${PWD}/version.log"
  TODIR="include/"
else
  CTRL="../version.log"
  TODIR=""
fi

if [ -f $CTRL ] ; then
	. $CTRL
else
	echo "Error: Unable to find control file: $CTRL"
	exit 0
fi


if [ -f ${TODIR}version.h ] ; then
	BUILD=`fgrep '#define BUILD' ${TODIR}version.h | sed -n 's/^#define BUILD.*\"\(.*\)\"/\1/p'`
	BUILD=`expr $BUILD + 1 2>/dev/null`
else
	BUILD=1
fi

CUR=`pwd`
if [ -d "${CUR}/.svn" ]; then
    for dir in `echo -n $PATH | sed 's/:/ /g'`; do
        if [ -x "${dir}/svnversion" ]; then

            echo "calling svn"
            if [ -d ".svn" ]; then
                REV=`${dir}/svnversion ${CUR} | sed 's/^\([0-9]{1,9}\)M*$/\1/' | cut -f 1 -d : | sed -e 's/M//'`
                if test "X$REV" = "Xexported"; then
                    REV="0"
                fi
            fi 
            break
        fi
    done
fi

if [ -z "${REV}" ]; then
    for dir in `echo -n $PATH | sed 's/:/ /g'`; do
        if [ -d "${CUR}/.git" ]; then
            SHA=$(cat .git/ORIG_HEAD)
            REV=$(git describe --long)
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            echo $REV
            if [ ! -z $REV ]; then

                cnt=1
                for i in $(seperate $REV, '.'); do
                    if [ $cnt -eq 1 ]; then
                        VERSION_MAJOR=$i
                    elif [[ $cnt -eq 2 ]]; then
                        VERSION_MINOR=$i
                    elif [[ $cnt -eq 3 ]]; then
                        VERSION_PATCH=${i:0:1}

                    fi
                    let cnt++
                done

                cnt=0
                for i in $(git describe |  awk -vORS=, '{ print $1 }' | sed 's/\-/\n/'); do 
                    if [ $cnt -eq 0 ]; then
                        VERSION=$i
                    elif [ $cnt -eq 1 ]; then
                        strip=$(echo $i | head -c -1)
                        set REV="${BRANCH}-${strip}"
                    fi
                    let cnt++
                done   
            fi 
            break
        else
            REV=""
            if [ -f ../.snapshot ]; then
                REV=`cat ../.snapshot`
                break
            fi
            if [ -f .snapshot ]; then
            REV=`cat .snapshot`
                break
            fi
            if [ -f .revision ]; then
                REV=`cat .revision`
                break
            fi
            break
        fi
    done
fi

if [ -z "#{REV}" ]; then
    VERSIONDOTTED="${REV}"
    VERSIONFULL="${BRANCH})-${REV}"
else    
    VERSIONDOTTED="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"    
    VERSIONFULL="$VERSIONDOTTED"
fi


VERSION="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"

CDATE=`date`
SUNAME=`uname -s`
SPROC=`uname -m`
UNAME_SHORT="${SUNAME} (${SPROC})"



cat >${TODIR}version.h <<EOF
/* Version information for Omega Server.
 *
 * (C) 2008-2010 Omega Team
 *
 *
 * Please read COPYING and CREDITS for further details.
 *
 * Based on loosly on version.sh from Anope 1.7.x by Anope Team
 *
 * This file is auto-generated by version.sh
 *  \$Id: version.sh 2148 2011-04-30 03:47:09Z twitch $
 *
 */

#ifndef __VERSION_H__
#define __VERSION_H__

#define VERSION_MAJOR	$VERSION_MAJOR
#define VERSION_MINOR	$VERSION_MINOR
#define VERSION_PATCH	$VERSION_PATCH
#define VERSION_EXTRA	"$VERSION_EXTRA"
#define VERSION_BUILD	"$REV" 

#define VERSION_NUM ((VERSION_MAJOR * 1000) + (VERSION_MINOR * 100) + VERSION_PATCH)

#define BUILD	"$BUILD"
#define VERSION_STRING "$VERSION"
#define VERSION_STRING_DOTTED "$VERSIONDOTTED"

#define SYSUNAME    "$UNAME"
#define SYSUNAME_SHORT "$UNAME_SHORT"
#define SYSUNAME_PROC "$SPROC"
#define SYSUNAME_KERNEL "$SUNAME"

#define COMPILE_DATE "$CDATE" 

#define MOD_API_MAJOR $MOD_API_MAJOR
#define MOD_API_MINOR $MOD_API_MINOR
#define MOD_API_PATCH $MOD_API_PATCH

#endif //__VERSION_H__
EOF

exit 0


